---
interface Props {
  title: string;
  image: string;
  description: string;
  category: string;
  link: string;
  technologies: string[];
}

const { title, image, description, category, technologies }: Props =
  Astro.props;

const colorsTailwind = [
  "bg-red-200",
  "bg-yellow-200",
  "bg-green-200",
  "bg-blue-200",
  "bg-indigo-200",
  "bg-purple-200",
  "bg-pink-200",
];
---

<div
  class="relative flex flex-col shadow-md rounded-xl overflow-hidden hover:shadow-lg hover:-translate-y-1 transition-all duration-300 max-w-sm h-full"
>
  <div class="h-auto overflow-hidden bg-gray-">
    <div class="relative w-full aspect-video rounded-md overflow-hidden">
      <img
        src={image}
        alt=""
        class="object-cover transform duration-300 hover:scale-110"
        sizes="(max-width: 640px) 100vw, (max-width: 768px) 50vw, 25vw"
      />
    </div>
  </div>
  <div class="bg-white pt-[1rem] px-3 flex flex-col h-auto">
    <h3 class="text-lg mb-2 font-medium">
      {title}
    </h3>
    <div class="flex justify-between items-center">
      <p class="text-md text-gray-400">{description}</p>
    </div>
  </div>
  <div class="flex flex-wrap flex-1 items-center pb-2 px-3">
    {
      technologies.map((technology, index) => {
        const randomColorClass = colorsTailwind[index % colorsTailwind.length];

        return (
          <div
            class={`relative mr-2 mt-1 flex items-center gap-x-1 rounded-md ${randomColorClass} px-2 py-1 text-sm transition`}
          >
            <div class="inline-block truncate text-md font-semibold">
              {technology}
            </div>
          </div>
        );
      })
    }
  </div>
</div>
