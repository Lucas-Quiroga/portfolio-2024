---
import { type DataType } from "../types/index";
import CardProject from "../components/CardProject.astro";
import { Data } from "../components/Data.jsx";

const { text } = Astro.props;

const projects: DataType[] = Data;
---

{
  text === "freelance" && (
    <section>
      <div class="lg:pl-12 xl:pl-[7rem] 2xl:pl-0">
        <div class="border-t-2 pt-4 sm:hidden" />
        <h2 class="flex items-center justify-center lg:justify-start text-3xl sm:text-4xl font-semibold gap-x-3 xl:text-[2.70rem] text-black/80 dark:text-white">
          {" "}
          Experiencia laboral{" "}
        </h2>
        <p class="flex justify-center lg:justify-start text-xl xl:text-3xl pt-2 dark:text-white">
          Freelance
        </p>
        <div class="mt-2">
          <span class="inline-block w-40 h-1 bg-blue-500 rounded-full" />
          <span class="inline-block w-6 h-1 ml-1 bg-blue-500 rounded-full" />
          <span class="inline-block w-3 h-1 ml-1 bg-blue-500 rounded-full" />
          <span class="inline-block w-1 h-1 ml-1 bg-blue-500 rounded-full" />
        </div>
      </div>

      <section class="container mx-auto py-10 md:py-20 antialiased">
        <section class="grid lg:grid-cols-2 2xl:grid-cols-4 grid-cols-1 gap-8 cardContainerFreelance">
          {projects
            .filter((item) => item.category === "freelance")
            .sort((a: DataType, b: DataType) => {
              if (!a.date || !b.date) {
                return 0; // Si no hay fechas, no se puede comparar
              }

              const fechaA = new Date(
                a.date.split("/").reverse().join("/")
              ).getTime();
              const fechaB = new Date(
                b.date.split("/").reverse().join("/")
              ).getTime();

              return fechaB - fechaA;
            })
            .map((item, index) => (
              <div
                class={`freelance-card ${
                  index > 3 ? "hidden" : ""
                } grid grid-cols-1 justify-center mx-auto`}
              >
                <CardProject
                  title={item.title}
                  description={item.description}
                  image={item.image}
                  link={item.link}
                  technologies={item.technologies}
                  category={item.category}
                  date={item.date}
                />
              </div>
            ))}
        </section>
      </section>
      {projects.filter((item) => item.category === "freelance").length > 4 && (
        <div class="mt-4 text-center">
          <button id="showMoreButtonFreelance" class="bg-blue-500">
            {" "}
            Ver más{" "}
          </button>
        </div>
      )}
    </section>
  )
}

{
  text === "personales" && (
    <section>
      <div class="lg:pl-12 xl:pl-[7rem] 2xl:pl-0">
        <div class="border-t-2 pt-4 sm:hidden" />
        <h2 class="flex items-center justify-center lg:justify-start text-3xl sm:text-4xl xl:text-[2.70rem] font-semibold gap-x-3 text-black/80 dark:text-white ">
          Proyectos personales
        </h2>
        <p class="flex justify-center lg:justify-start text-xl xl:text-3xl pt-2 dark:text-white">
          Más recientes
        </p>
        <div class="mt-2">
          <span class="inline-block w-40 h-1 bg-blue-500 rounded-full" />
          <span class="inline-block w-3 h-1 ml-1 bg-blue-500 rounded-full" />
          <span class="inline-block w-1 h-1 ml-1 bg-blue-500 rounded-full" />
        </div>
      </div>

      <section class="container mx-auto py-10 md:py-20 antialiased ">
        <section
          class="grid lg:grid-cols-2 2xl:grid-cols-4 grid-cols-1 gap-8"
          id="cardContainer"
        >
          {projects
            .filter((item) => item.category === "personales")
            .sort((a: DataType, b: DataType) => {
              if (!a.date || !b.date) {
                return 0; // Si no hay fechas, no se puede comparar
              }

              const fechaA = new Date(
                a.date.split("/").reverse().join("/")
              ).getTime();
              const fechaB = new Date(
                b.date.split("/").reverse().join("/")
              ).getTime();

              return fechaB - fechaA;
            })
            .slice(0, 8)
            .map((item, index) => (
              <div
                class={`grid grid-cols-1 justify-center mx-auto ${
                  index > 3 ? "hidden" : ""
                }`}
              >
                <CardProject
                  transition:persist
                  title={item.title}
                  description={item.description}
                  image={item.image}
                  link={item.link}
                  repository={item.repository}
                  technologies={item.technologies}
                  category={item.category}
                />
              </div>
            ))}
        </section>
      </section>

      {Data.length > 3 && (
        <div class="mt-4 text-center">
          <button
            id="showMoreButton"
            class="bg-blue-500 px-3 py-1 shadow-lg shadow-gray-500/50 ¿ text-white rounded-lg text-[15px] cursor-pointer active:scale-[.97]"
          >
            {" "}
            Ver más{" "}
          </button>
        </div>
      )}
    </section>
  )
}

<script>
  function toggleCardsVisibility() {
    const cardContainer = document.getElementById("cardContainer");
    if (cardContainer) {
      const cards = cardContainer.children;

      for (let i = 4; i < cards.length; i++) {
        cards[i].classList.toggle("hidden"); // toggle the visibility of each card
      }
    }
  }

  function toggleButtonText(button: HTMLButtonElement) {
    button.innerText = button.innerText === "Ver más" ? "Ver menos" : "Ver más";
  }

  window.addEventListener("DOMContentLoaded", () => {
    const showMoreButton = document.getElementById(
      "showMoreButton"
    ) as HTMLButtonElement;
    if (showMoreButton) {
      showMoreButton.addEventListener("click", function () {
        toggleCardsVisibility();
        toggleButtonText(this);
      });
    }
  });

  function toggleFreelanceCardsVisibility() {
    const cardContainer = document.getElementById("cardContainerFreelance");
    if (cardContainer) {
      const cards = cardContainer.children;

      for (let i = 4; i < cards.length; i++) {
        cards[i].classList.toggle("hidden");
      }
    }
  }

  function toggleFreelanceButtonText(button: HTMLButtonElement) {
    button.innerText = button.innerText === "Ver más" ? "Ver menos" : "Ver más";
  }

  window.addEventListener("DOMContentLoaded", () => {
    const showMoreButtonFreelance = document.getElementById(
      "showMoreButtonFreelance"
    ) as HTMLButtonElement;
    if (showMoreButtonFreelance) {
      showMoreButtonFreelance.addEventListener("click", function () {
        toggleFreelanceCardsVisibility();
        toggleFreelanceButtonText(this);
      });
    }
  });
</script>
